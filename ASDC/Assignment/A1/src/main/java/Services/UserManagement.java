package Services;

import Dao.Book;
import Dao.User;
import Log.LogWriter;
import Log.TxtLogWriter;
import Repositories.UserRepo;
import DriverClass.*;
import java.time.LocalDate;
import java.util.List;
import java.util.Map;

public class UserManagement {

    private UtilFunctions utilFunctions;
    private LogWriter logWriter;
    private UserRepo userRepo;

    public UserManagement(UserRepo userRepo, UtilFunctions utilFunctions){
        this.utilFunctions = utilFunctions;
        logWriter = TxtLogWriter.getInstance();
        this.userRepo = userRepo;
    }

    public boolean registerUser(User user) {

        // Validate input
        //userID is autoGenerated and dateOfEnroll is today's date so no need to validate that fields.
        if (validateUser(user)){
            if (!userRepo.isEmailAlreadyExist(user.getEmail())){
                if (userRepo.createUser(user)){
                    System.out.println("User Created Successfully!");
                    logWriter.Write("Success", "UserManagement", "User is successfully registered!");
                    return true;
                }
                else{
                    System.out.println("Something went wrong, please try again later!");
                    logWriter.Write("Failure", "UserManagement", "Unsuccessful to registered new user!");
                }
            }
            else {
                System.out.println("Email is already exist, Please SignIn, or click on forgot Password!");
            }
        }

        return false;
    }

    public boolean updateUserDetails(User user) {

        // Validate input
        if (validateUser(user)){
            if (userRepo.isEmailAlreadyExist(user.getEmail())){
                if (userRepo.updateUser(user)){
                    System.out.println("User details is successfully edited!");
                    logWriter.Write("Success", "UserManagement", "User Details are successfully updated!");
                    return true;
                }
                else{
                    System.out.println("Something went wrong, please try again later!");
                    logWriter.Write("Failure", "UserManagement", "Unsuccessful to update user details!");
                }
            }
            else{
                System.out.println("Email Doesn't Exist!");
            }
        }

        return false;
    }

    private boolean validateUser(User user){

        if (user == null ||
                user.getName() == null || user.getName().isEmpty() ||
                !this.utilFunctions.isMobileNumberValid(user.getMobileNumber())||
                user.getEmail() == null || user.getEmail().isEmpty() ||
                !this.utilFunctions.isEmailValid(user.getEmail()) ||
                user.getAddress() == null || user.getAddress().isEmpty()
        ) {
            System.out.println("Invalid user input.");
            return false;
        }

        return true;
    }

    public boolean deleteUser(String userId) {

        if (userId == null || userId.isEmpty()) {
            System.out.println("UserID is empty, Please enter valid UserID");
            return false;
        }

        if (!userRepo.isUserExist(userId)){
            System.out.println("User Doesn't Exist!");
            return false;
        }

        //Check user still have to return some books.
        List<Map<String, LocalDate>> listOfPendingBooks = userRepo.checkUserPendingBooks(userId);
        if (!listOfPendingBooks.isEmpty()){
            System.out.println(listOfPendingBooks);
            System.out.println("User still have some books to returned, so it is not possible to delete that user!");
            return false;
        }

        if (userRepo.deleteUser(userId)){
            System.out.println("User is Successfully Deleted!");
            logWriter.Write("Success", "UserManagement", "User is successfully deleted!");
            return true;
        }
        else{
            System.out.println("Something went wrong, please try again later!");
            logWriter.Write("Failure", "UserManagement", "Unsuccessful to delete user!");
            return false;
        }
    }

    public User getUser(String userId) {

        if (userId == null || userId.isEmpty()) {
            System.out.println("UserID is empty, Please enter valid UserID");
            return null;
        }

        if (!userRepo.isUserExist(userId)){
            System.out.println("User Doesn't exist!");
            return null;
        }

        return userRepo.getUser(userId);
    }


}